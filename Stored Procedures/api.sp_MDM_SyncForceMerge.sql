SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROCEDURE [api].[sp_MDM_SyncForceMerge] 
	@ClientDB varchar(50) 
as 
BEGIN 
	--DECLARE @ClientDb VARCHAR(50) = 'PSP' 
 
	IF (SELECT @@VERSION) LIKE '%Azure%' 
		SET @ClientDB = '' 
	ELSE IF (SELECT @@VERSION) NOT LIKE '%Azure%' 
		SET @ClientDB = @ClientDB + '.' 
 
	DECLARE  
		 @sql NVARCHAR(MAX) = '' 
 
SET @sql = @sql 
+ ' -- Look in MDM for GUIDs that do not match between Winner/Loser - Not Complete in MDM YET' + CHAR(13) 
+ ' SELECT a.PK_MergeID, a.Winning_DimCustomerID, a.Loser_DimCustomerID' + CHAR(13) 
+ ' INTO #tmpA' + CHAR(13) 
+ ' -- Select *' + CHAR(13) 
+ ' FROM ' + @ClientDB + 'API.Incoming_Merge a ' + CHAR(13) 
+ ' LEFT JOIN ' + @ClientDB + 'dbo.dimcustomerssbid b ON a.Winning_DimCustomerID = b.DimCustomerId' + CHAR(13) 
+ ' LEFT JOIN ' + @ClientDB + 'dbo.dimcustomerssbid c ON a.Loser_DimCustomerID = c.DimCustomerId' + CHAR(13) 
+ ' WHERE b.SSB_CRMSYSTEM_CONTACT_ID <> c.SSB_CRMSYSTEM_CONTACT_ID' + CHAR(13) 
+ ' ' + CHAR(13) 
+ ' -- DROP TABLE #tmpA' + CHAR(13) 
+ ' ' + CHAR(13) 
+ ' ' + CHAR(13) 
+ ' ---pair is not in forcemerge' + CHAR(13) 
+ ' ---DROP TABLE #tmp_new;' + CHAR(13) 
+ ' ' + CHAR(13) 
+ ' SELECT a.* ' + CHAR(13) 
+ ' INTO #Tmp_New' + CHAR(13) 
+ ' FROM #tmpA a' + CHAR(13) 
+ ' LEFT JOIN ' + @ClientDB + 'mdm.forcemergeids b' + CHAR(13) 
+ ' ON (a.Loser_DimCustomerID = b.losing_dimcustomerid  AND a.winning_dimcustomerid = b.winning_dimcustomerid) ' + CHAR(13) 
+ ' OR (a.loser_dimcustomerid = b.winning_dimcustomerid AND a.winning_dimcustomerid = b.losing_dimcustomerid)' + CHAR(13) 
+ ' WHERE b.forcemergeid IS NULL;' + CHAR(13) 
+ ' ' + CHAR(13) 
+ ' ---Loser is already in table and winner is also in table as a loser - both have same winner.  -- No need to do anything with these.  ' + CHAR(13) 
+ ' ---DROP TABLE #tmp_already_queued;' + CHAR(13) 
+ ' ' + CHAR(13) 
+ ' SELECT a.PK_MergeID' + CHAR(13) 
+ ' INTO #Tmp_already_queued' + CHAR(13) 
+ ' FROM #Tmp_new a' + CHAR(13) 
+ ' INNER JOIN ' + @ClientDB + 'mdm.forcemergeids b' + CHAR(13) 
+ ' ON a.loser_dimcustomerid = b.losing_dimcustomerid' + CHAR(13) 
+ ' inner JOIN ' + @ClientDB + 'mdm.forcemergeids c' + CHAR(13) 
+ ' ON a.Winning_DimCustomerID = c.losing_dimcustomerid' + CHAR(13) 
+ ' WHERE b.winning_dimcustomerid = c.winning_dimcustomerid' + CHAR(13) 
+ ' ORDER BY a.PK_MergeID' + CHAR(13) 
+ ' ' + CHAR(13) 
+ ' DELETE FROM #tmp_new WHERE PK_MergeID IN (SELECT PK_MergeID FROM #tmp_already_queued);' + CHAR(13) 
+ ' ' + CHAR(13) 
+ ' ---SELECT COUNT(0) FROM #Tmp_new;' + CHAR(13) 
+ ' ' + CHAR(13) 
+ ' ---Neither is in ' + CHAR(13) 
+ ' ----DROP TABLE #tmp_brand_new;' + CHAR(13) 
+ ' SELECT a.PK_MergeID, a.Winning_DimCustomerID, a.Loser_DimCustomerID ' + CHAR(13) 
+ ' INTO #tmp_brand_new' + CHAR(13) 
+ ' FROM #Tmp_new a' + CHAR(13) 
+ ' LEFT JOIN ' + @ClientDB + 'mdm.forcemergeids b' + CHAR(13) 
+ ' ON a.winning_dimcustomerid = b.winning_dimcustomerid OR a.Winning_DimCustomerID = b.losing_dimcustomerid' + CHAR(13) 
+ ' LEFT JOIN ' + @ClientDB + 'mdm.forcemergeids c' + CHAR(13) 
+ ' ON a.Loser_DimCustomerID = c.winning_dimcustomerid OR a.Loser_DimCustomerID = c.losing_dimcustomerid' + CHAR(13) 
+ ' WHERE b.ForceMergeID IS NULL AND c.forcemergeid IS NULL;' + CHAR(13) 
+ ' ' + CHAR(13) 
+ ' DELETE FROM #tmp_brand_new WHERE Winning_DimCustomerID IN (' + CHAR(13) 
+ ' SELECT Winning_DimCustomerID FROM #tmp_brand_new ' + CHAR(13) 
+ ' WHERE winning_dimcustomerid IN (SELECT Loser_DimCustomerID FROM #tmp_brand_new));' + CHAR(13) 
+ ' ' + CHAR(13) 
+ ' DELETE FROM #tmp_brand_new WHERE loser_DimCustomerID IN (' + CHAR(13) 
+ ' SELECT loser_DimCustomerID FROM #tmp_brand_new ' + CHAR(13) 
+ ' GROUP BY Loser_DimCustomerID' + CHAR(13) 
+ ' HAVING COUNT(DISTINCT Winning_DimCustomerID) > 1);' + CHAR(13) 
+ ' ' + CHAR(13) 
+ ' INSERT INTO ' + @ClientDB + 'mdm.ForceMergeIDs' + CHAR(13) 
+ '         ( winning_dimcustomerid ,' + CHAR(13) 
+ '           losing_dimcustomerid' + CHAR(13) 
+ '         )' + CHAR(13) 
+ ' SELECT DISTINCT winning_dimcustomerid, loser_dimcustomerid' + CHAR(13) 
+ ' FROM #tmp_brand_new;' + CHAR(13) 
+ ' ' + CHAR(13) 
+ ' ' + CHAR(13) 
+ ' DELETE FROM #Tmp_New WHERE PK_MergeID IN (SELECT pk_mergeid FROM #tmp_brand_new);' + CHAR(13) 
+ ' ' + CHAR(13) 
+ ' ' + CHAR(13) 
+ ' ' + CHAR(13) 
+ ' ---Winner is in table, loser is not ---' + CHAR(13) 
+ ' ---DROP TABLE #Tmp_New_losers;' + CHAR(13) 
+ ' ' + CHAR(13) 
+ ' SELECT DISTINCT a.* ' + CHAR(13) 
+ ' INTO #tmp_new_losers' + CHAR(13) 
+ ' FROM #tmp_new a' + CHAR(13) 
+ ' INNER JOIN ' + @ClientDB + 'mdm.ForceMergeIDs b' + CHAR(13) 
+ ' ON a.winning_dimcustomerid = b.winning_dimcustomerid' + CHAR(13) 
+ ' left JOIN ' + @ClientDB + 'mdm.ForceMergeIDs c' + CHAR(13) 
+ ' ON a.Loser_DimCustomerID = c.winning_dimcustomerid OR a.Loser_DimCustomerID = c.losing_dimcustomerid' + CHAR(13) 
+ ' WHERE c.ForceMergeID IS NULL' + CHAR(13) 
+ ' ' + CHAR(13) 
+ ' ' + CHAR(13) 
+ ' INSERT INTO ' + @ClientDB + 'mdm.ForceMergeIDs ' + CHAR(13) 
+ '         ( winning_dimcustomerid ,' + CHAR(13) 
+ '           losing_dimcustomerid' + CHAR(13) 
+ '         )' + CHAR(13) 
+ ' SELECT DISTINCT winning_dimcustomerid, loser_dimcustomerid' + CHAR(13) 
+ ' FROM #tmp_new_losers;' + CHAR(13) 
+ ' ' + CHAR(13) 
	+ 'Insert into ' + @ClientDB + 'mdm.auditlog (logdate, mdm_process, process_step, cnt)' + CHAR(13) 
	+ 'values (current_timestamp, ''Sync Force Merge'', ''New Merges Added'', @@ROWCOUNT);'  
 
 
+ ' ' + CHAR(13) 
+ ' DELETE FROM #Tmp_New WHERE PK_MergeID IN (SELECT pk_mergeid FROM #tmp_new_losers);' + CHAR(13) 
+ ' ' + CHAR(13) 
+ ' ' + CHAR(13) 
+ ' ' + CHAR(13) 
+ ' ' + CHAR(13) 
+ ' ---Loser is already in table and winner is not in table' + CHAR(13) 
+ ' ---Drop table #Tmp_Add_losers;' + CHAR(13) 
+ ' ' + CHAR(13) 
+ ' SELECT a.pk_mergeid, a.Winning_DimCustomerID AS new_winner, a.Loser_DimCustomerID AS new_loser, b.winning_dimcustomerid AS existing_winner, b.losing_dimcustomerid AS existing_loser ' + CHAR(13) 
+ ' INTO #Tmp_Add_Losers' + CHAR(13) 
+ ' FROM #Tmp_new a' + CHAR(13) 
+ ' INNER JOIN ' + @ClientDB + 'mdm.forcemergeids b' + CHAR(13) 
+ ' ON a.loser_dimcustomerid = b.losing_dimcustomerid' + CHAR(13) 
+ ' LEFT JOIN ' + @ClientDB + 'mdm.forcemergeids c' + CHAR(13) 
+ ' ON a.Winning_DimCustomerID = c.winning_dimcustomerid OR a.Winning_DimCustomerID = c.losing_dimcustomerid' + CHAR(13) 
+ ' WHERE c.ForceMergeID IS NULL;' + CHAR(13) 
+ ' ' + CHAR(13) 
+ ' ---Add Winner as additional loser' + CHAR(13) 
+ ' INSERT INTO ' + @ClientDB + 'mdm.ForceMergeIDs' + CHAR(13) 
+ '         ( winning_dimcustomerid ,' + CHAR(13) 
+ '           losing_dimcustomerid' + CHAR(13) 
+ '         )' + CHAR(13) 
+ ' SELECT DISTINCT existing_winner, new_winner' + CHAR(13) 
+ ' FROM #Tmp_Add_Losers a' + CHAR(13) 
+ ' LEFT JOIN ' + @ClientDB + 'mdm.ForceMergeIDs b' + CHAR(13) 
+ ' ON a.existing_winner = b.winning_dimcustomerid AND a.new_winner = b.winning_dimcustomerid' + CHAR(13) 
+ ' WHERE b.ForceMergeID IS NULL' + CHAR(13) 
 
	+ 'Insert into ' + @ClientDB + 'mdm.auditlog (logdate, mdm_process, process_step, cnt)' + CHAR(13) 
	+ 'values (current_timestamp, ''Sync Force Merge'', ''New Losers Added'', @@ROWCOUNT);'  
 
 
+ ' ' + CHAR(13) 
+ ' DELETE FROM #tmp_new WHERE pk_mergeid IN (SELECT pk_mergeid FROM #Tmp_add_losers);' + CHAR(13) 
+ ' ' + CHAR(13) 
+ ' ' + CHAR(13) 
+ ' ' + CHAR(13) 
+ ' ---Winner is already in the table as a winner - Loser is already a loser - different winner...' + CHAR(13) 
+ ' --DROP TABLE #tmp_loser_hasdiffwinner' + CHAR(13) 
+ ' SELECT DISTINCT  a.*, c.winning_dimcustomerid AS new_loser, c.ForceMergeID' + CHAR(13) 
+ ' INTO #tmp_loser_hasdiffwinner' + CHAR(13) 
+ ' FROM #Tmp_new a' + CHAR(13) 
+ ' INNER JOIN ' + @ClientDB + 'mdm.ForceMergeIDs b' + CHAR(13) 
+ ' ON a.Winning_DimCustomerID = b.winning_dimcustomerid' + CHAR(13) 
+ ' inner JOIN ' + @ClientDB + 'mdm.ForceMergeIDs c' + CHAR(13) 
+ ' ON a.Loser_DimCustomerID = c.losing_DimCustomerID ' + CHAR(13) 
+ ' ' + CHAR(13) 
+ ' ---SELECT * FROM #tmp_loser_hasdiffwinner' + CHAR(13) 
+ ' ---drop table #tmp_more_losers' + CHAR(13) 
+ ' SELECT * ' + CHAR(13) 
+ ' INTO #tmp_more_losers' + CHAR(13) 
+ ' FROM ' + @ClientDB + 'mdm.forcemergeids a' + CHAR(13) 
+ ' INNER JOIN (SELECT DISTINCT new_loser FROM #tmp_loser_hasdiffwinner) b' + CHAR(13) 
+ ' ON a.winning_dimcustomerid = new_loser' + CHAR(13) 
+ ' ' + CHAR(13) 
+ ' --Add the new winner as the loser' + CHAR(13) 
+ ' INSERT INTO ' + @ClientDB + 'mdm.forcemergeids (winning_dimcustomerid, losing_dimcustomerid)' + CHAR(13) 
+ ' SELECT DISTINCT winning_dimcustomerid, new_loser' + CHAR(13) 
+ ' FROM #tmp_loser_hasdiffwinner;' + CHAR(13) 
 
	+ 'Insert into ' + @ClientDB + 'mdm.auditlog (logdate, mdm_process, process_step, cnt)' + CHAR(13) 
	+ 'values (current_timestamp, ''Sync Force Merge'', ''Move Winners to Losers'', @@ROWCOUNT);'  
 
+ ' ' + CHAR(13) 
+ ' ---add the losers from the previous winner' + CHAR(13) 
+ ' INSERT INTO ' + @ClientDB + 'mdm.forcemergeids (winning_dimcustomerid, losing_dimcustomerid)' + CHAR(13) 
+ ' SELECT distinct b.winning_dimcustomerid, a.losing_dimcustomerid ' + CHAR(13) 
+ ' FROM #tmp_more_losers a' + CHAR(13) 
+ ' INNER JOIN #tmp_loser_hasdiffwinner b' + CHAR(13) 
+ ' ON a.new_loser = b.new_loser;' + CHAR(13) 
 
	+ 'Insert into ' + @ClientDB + 'mdm.auditlog (logdate, mdm_process, process_step, cnt)' + CHAR(13) 
	+ 'values (current_timestamp, ''Sync Force Merge'', ''Add losers from Prev Winner'', @@ROWCOUNT);'  
 
+ ' ' + CHAR(13) 
+ ' ---delete the previous winner' + CHAR(13) 
+ ' Delete FROM ' + @ClientDB + 'mdm.forcemergeids ' + CHAR(13) 
+ ' WHERE winning_dimcustomerid IN (SELECT new_loser FROM #tmp_loser_hasdiffwinner)' + CHAR(13) 
 
	+ 'Insert into ' + @ClientDB + 'mdm.auditlog (logdate, mdm_process, process_step, cnt)' + CHAR(13) 
	+ 'values (current_timestamp, ''Sync Force Merge'', ''Delete Old Winners 1'', @@ROWCOUNT);'  
 
+ ' ' + CHAR(13) 
+ ' DELETE FROM #Tmp_New WHERE PK_MergeID IN (SELECT pk_mergeid FROM #tmp_loser_hasdiffwinner);' + CHAR(13) 
 
	+ 'Insert into ' + @ClientDB + 'mdm.auditlog (logdate, mdm_process, process_step, cnt)' + CHAR(13) 
	+ 'values (current_timestamp, ''Sync Force Merge'', ''Delete Old Winners 2'', @@ROWCOUNT);'  
+ ' ' + CHAR(13) 
+ ' ---Winner is already in the table as a winner - Loser is also a winner...' + CHAR(13) 
+ ' ---DROP TABLE #Tmp_loser_is_winner' + CHAR(13) 
+ ' ' + CHAR(13) 
+ ' SELECT DISTINCT a.*, c.losing_dimcustomerid AS new_loser' + CHAR(13) 
+ ' INTO #Tmp_loser_is_winner' + CHAR(13) 
+ ' FROM #Tmp_new a' + CHAR(13) 
+ ' INNER JOIN ' + @ClientDB + 'mdm.ForceMergeIDs b' + CHAR(13) 
+ ' ON a.Winning_DimCustomerID = b.winning_dimcustomerid' + CHAR(13) 
+ ' inner JOIN ' + @ClientDB + 'mdm.ForceMergeIDs c' + CHAR(13) 
+ ' ON a.Loser_DimCustomerID = c.Winning_DimCustomerID ' + CHAR(13) 
+ ' ' + CHAR(13) 
+ ' ---Get the Losers''s Losers and add them as losers for the winner...' + CHAR(13) 
+ ' INSERT INTO ' + @ClientDB + 'mdm.ForceMergeIDs' + CHAR(13) 
+ '         ( winning_dimcustomerid ,' + CHAR(13) 
+ '           losing_dimcustomerid' + CHAR(13) 
+ ' )' + CHAR(13) 
+ ' SELECT DISTINCT a.winning_dimcustomerid, loser_dimcustomerid' + CHAR(13) 
+ ' FROM #Tmp_loser_is_winner a' + CHAR(13) 
+ ' LEFT JOIN ' + @ClientDB + 'mdm.ForceMergeIDs b' + CHAR(13) 
+ ' ON a.Loser_DimCustomerID = b.losing_dimcustomerid' + CHAR(13) 
+ ' WHERE b.ForceMergeID IS null' + CHAR(13) 
+ ' UNION ' + CHAR(13) 
+ ' SELECT DISTINCT a.winning_dimcustomerid, new_loser' + CHAR(13) 
+ ' FROM #tmp_loser_is_winner a' + CHAR(13) 
+ ' LEFT JOIN ' + @ClientDB + 'mdm.ForceMergeIDs b' + CHAR(13) 
+ ' ON a.new_loser = b.losing_dimcustomerid' + CHAR(13) 
+ ' WHERE b.ForceMergeID IS null' + CHAR(13) 
 
	+ 'Insert into ' + @ClientDB + 'mdm.auditlog (logdate, mdm_process, process_step, cnt)' + CHAR(13) 
	+ 'values (current_timestamp, ''Sync Force Merge'', ''Move Loser to WInner'', @@ROWCOUNT);'  
 
+ ' ' + CHAR(13) 
+ ' ---Delete where loser is winner' + CHAR(13) 
+ ' DELETE FROM ' + @ClientDB + 'mdm.ForceMergeIDs WHERE winning_dimcustomerid IN (SELECT DISTINCT loser_dimcustomerid FROM #Tmp_loser_is_winner)' + CHAR(13) 
+ ' ' + CHAR(13) 
	+ 'Insert into ' + @ClientDB + 'mdm.auditlog (logdate, mdm_process, process_step, cnt)' + CHAR(13) 
	+ 'values (current_timestamp, ''Sync Force Merge'', ''Delete Old Losers 1'', @@ROWCOUNT);'  
 
+ ' DELETE FROM #Tmp_New WHERE PK_MergeID IN (SELECT pk_mergeid FROM #tmp_loser_is_winner);' + CHAR(13) 
 
	+ 'Insert into ' + @ClientDB + 'mdm.auditlog (logdate, mdm_process, process_step, cnt)' + CHAR(13) 
	+ 'values (current_timestamp, ''Sync Force Merge'', ''Delete Old Losers 2'', @@ROWCOUNT);'   
+ ' ' + CHAR(13) 
+ ' ---Loser is the winner and winner is not in' + CHAR(13) 
+ ' ---DROP TABLE #Tmp_reversed;' + CHAR(13) 
+ ' ' + CHAR(13) 
+ ' SELECT distinct a.* ' + CHAR(13) 
+ ' INTO #Tmp_reversed' + CHAR(13) 
+ ' FROM #Tmp_new a' + CHAR(13) 
+ ' INNER JOIN ' + @ClientDB + 'mdm.ForceMergeIDs b' + CHAR(13) 
+ ' ON a.loser_DimCustomerID = b.winning_dimcustomerid' + CHAR(13) 
+ ' LEFT JOIN ' + @ClientDB + 'mdm.ForceMergeIDs c' + CHAR(13) 
+ ' ON a.Winning_DimCustomerID = c.winning_dimcustomerid OR a.Winning_DimCustomerID = c.losing_dimcustomerid' + CHAR(13) 
+ ' ' + CHAR(13) 
+ ' ---Insert loser as winner, winner as loser' + CHAR(13) 
+ ' INSERT INTO ' + @ClientDB + 'mdm.ForceMergeIDs' + CHAR(13) 
+ '         ( winning_dimcustomerid ,' + CHAR(13) 
+ '           losing_dimcustomerid' + CHAR(13) 
+ ' )' + CHAR(13) 
+ ' SELECT DISTINCT a.Loser_dimcustomerid, a.winning_dimcustomerid' + CHAR(13) 
+ ' FROM #tmp_reversed a' + CHAR(13) 
+ ' LEFT JOIN ' + @ClientDB + 'mdm.ForceMergeIDs b' + CHAR(13) 
+ ' ON a.loser_dimcustomerid = b.winning_dimcustomerid AND a.Winning_DimCustomerID = b.losing_dimcustomerid' + CHAR(13) 
+ ' WHERE b.ForceMergeID IS null;' + CHAR(13) 
+ ' ' + CHAR(13) 
	+ 'Insert into ' + @ClientDB + 'mdm.auditlog (logdate, mdm_process, process_step, cnt)' + CHAR(13) 
	+ 'values (current_timestamp, ''Sync Force Merge'', ''Reversals'', @@ROWCOUNT);'  
 
+ ' DELETE FROM #Tmp_New WHERE PK_MergeID IN (SELECT pk_mergeid FROM #tmp_reversed);' + CHAR(13) 
+ ' ' + CHAR(13) 
+ ' ' + CHAR(13) 
	+ 'Insert into ' + @ClientDB + 'mdm.auditlog (logdate, mdm_process, process_step, cnt)' + CHAR(13) 
	+ 'values (current_timestamp, ''Sync Force Merge'', ''Delete Old Reversals'', @@ROWCOUNT);'  
 
+ ' ---Audit' + CHAR(13) 
+ ' SELECT winning_dimcustomerid ' + CHAR(13) 
+ ' FROM ' + @ClientDB + 'mdm.forcemergeids a' + CHAR(13) 
+ ' WHERE winning_dimcustomerid IN (SELECT losing_dimcustomerid FROM ' + @ClientDB + 'mdm.forcemergeids);' + CHAR(13) 
+ ' ' + CHAR(13) 
	+ 'Insert into ' + @ClientDB + 'mdm.auditlog (logdate, mdm_process, process_step, cnt)' + CHAR(13) 
	+ 'values (current_timestamp, ''Sync Force Merge'', ''Audit Winner = Loser'', @@ROWCOUNT);'  
 
+ ' SELECT losing_dimcustomerid' + CHAR(13) 
+ ' FROM ' + @ClientDB + 'mdm.ForceMergeIDs' + CHAR(13) 
+ ' GROUP BY losing_dimcustomerid' + CHAR(13) 
+ ' HAVING count(DISTINCT winning_dimcustomerid) > 1' + CHAR(13) 
+ ' ' + CHAR(13) 
+ ' ' + CHAR(13) 
	+ 'Insert into ' + @ClientDB + 'mdm.auditlog (logdate, mdm_process, process_step, cnt)' + CHAR(13) 
	+ 'values (current_timestamp, ''Sync Force Merge'', ''Audit Loser with Multiple Winners'', @@ROWCOUNT);'  
 
+ ' ' + CHAR(13) 
+ ' ' + CHAR(13) 
+ ' ----Account Groupings' + CHAR(13) 
+ ' ' + CHAR(13) 
+ ' ' + CHAR(13) 
+ '   Insert into ' + @ClientDB + 'mdm.forceacctgrouping (dimcustomerid, Groupingid) ' + CHAR(13) 
+ '   Select b.dimcustomerid, parentid' + CHAR(13) 
+ '   from ' + @ClientDB + 'api.Incoming_Unmerge a' + CHAR(13) 
+ '   inner join ' + @ClientDB + 'dbo.dimcustomerssbid b with (nolock)' + CHAR(13) 
+ '   on a.childid = b.ssb_crmsystem_contact_id' + CHAR(13) 
+ '   left join ' + @ClientDB + 'mdm.forceacctgrouping c' + CHAR(13) 
+ '   on b.dimcustomerid = c.dimcustomerid' + CHAR(13) 
+ '   where c.dimcustomerid is null' + CHAR(13) 
+ ' ' + CHAR(13) 
	+ 'Insert into ' + @ClientDB + 'mdm.auditlog (logdate, mdm_process, process_step, cnt)' + CHAR(13) 
	+ 'values (current_timestamp, ''Sync Force Merge'', ''Add Force Acct Grouping - Merges'', @@ROWCOUNT);'  
+ ' ' + CHAR(13) 
+ '   Insert into ' + @ClientDB + 'mdm.forceacctgrouping (dimcustomerid, Groupingid)' + CHAR(13) 
+ '   Select distinct b.dimcustomerid, parentid' + CHAR(13) 
+ '   from ' + @ClientDB + 'api.Incoming_Unmerge a' + CHAR(13) 
+ '   inner join ' + @ClientDB + 'dbo.dimcustomerssbid b with (nolock)' + CHAR(13) 
+ '   on a.parentid = b.ssb_crmsystem_contactacct_id' + CHAR(13) 
+ '   left join ' + @ClientDB + 'mdm.forceacctgrouping c' + CHAR(13) 
+ '   on b.dimcustomerid = c.dimcustomerid' + CHAR(13) 
+ '   where c.dimcustomerid is null' + CHAR(13) 
 
	+ 'Insert into ' + @ClientDB + 'mdm.auditlog (logdate, mdm_process, process_step, cnt)' + CHAR(13) 
	+ 'values (current_timestamp, ''Sync Force Merge'', ''Add Force Acct Grouping - UnMerges'', @@ROWCOUNT);'  
 
	---SELECT @sql 
	 
	EXEC sp_executesql @sql 
END
GO
